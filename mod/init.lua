-- Generated by Haxe 4.0.5
local _hx_array_mt = {
  __newindex = function(t,k,v)
    local len = t.length
    t.length =  k >= len and (k + 1) or len
    rawset(t,k,v)
  end
}

local function _hx_tab_array(tab,length)
  tab.length = length
  return setmetatable(tab, _hx_array_mt)
end

local function _hx_anon_newindex(t,k,v) t.__fields__[k] = true; rawset(t,k,v); end
local _hx_anon_mt = {__newindex=_hx_anon_newindex}
local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_anon_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_anon_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_anon_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_anon_newindex, __index=prototype})
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
local Main = _hx_e()
local Math = _hx_e()
local String = _hx_e()
local Std = _hx_e()
__lua_Boot = _hx_e()
__noita_EventFunctions = _hx_e()
__noita__PerkList_PerkList_Impl_ = _hx_e()
__noita_wand__Spells_Spells_Impl_ = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.prototype = _hx_a();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local ret = _g;
  local _g3 = 0;
  while (_g3 < a.length) do 
    local i1 = a[_g3];
    _g3 = _g3 + 1;
    ret:push(i1);
  end;
  do return ret end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _gthis = self;
  local cur_length = 0;
  local i = _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end});
  while (i:hasNext()) do 
    local i1 = i:next();
    _G.table.insert(tbl, Std.string(i1));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g2 = pos + len;
  local _g3 = self.length;
  while (_g2 < _g3) do 
    _g2 = _g2 + 1;
    local i1 = _g2 - 1;
    self[i1] = self[i1 + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  local _g1 = len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g2 = i;
      local _g11 = self.length - 1;
      while (_g2 < _g11) do 
        _g2 = _g2 + 1;
        local j = _g2 - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  local _gthis = self;
  local cur_length = 0;
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end}) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        local i = _g - 1;
        self[i] = nil;
      end;
      self.length = len;
    end;
  end;
end

Main.new = {}
Main.OnPlayerSpawned = function(player_entity) 
  local inventory = nil;
  local playerChildEntities = _G.EntityGetAllChildren(player_entity);
  if (playerChildEntities ~= nil) then 
    _G.table.foreach(playerChildEntities, function(i,childEntity) 
      local childEntityName = _G.EntityGetName(childEntity);
      if (childEntityName == "inventory_quick") then 
        inventory = childEntity;
        GamePrint(childEntity);
      end;
      do return end;
    end);
  else
    _G.GamePrint("player has no child");
  end;
  if (inventory ~= nil) then 
    local inventoryItems = _G.EntityGetAllChildren(inventory);
    if (inventoryItems ~= nil) then 
      _G.table.foreach(inventoryItems, function(i1,item) 
        _G.GameKillInventoryItem(player_entity, item);
        _G.GamePrint("remove");
        do return end;
      end);
    end;
    local wand1 = _G.EntityLoad("./wand_good_1.xml");
    _G.EntityAddChild(inventory, wand1);
    _G.GamePrint("got wand1");
    local item_entity1 = _G.EntityLoad("data/entities/items/pickup/potion_water.xml");
    _G.EntityAddChild(inventory, item_entity1);
    _G.GamePrint("got water");
    local item_entity2 = _G.EntityLoad("data/entities/items/pickup/potion_water.xml");
    _G.EntityAddChild(inventory, item_entity2);
    _G.GamePrint("got water");
  else
    _G.GamePrint("inventory is empty");
  end;
  _G.GamePrintImportant("You got power!!!", "by Mod");
end
Main.hasAlreadyRun = function(modName) 
  if (_G.GameHasFlagRun(modName)) then 
    do return true end;
  end;
  _G.GameHasFlagRun(modName);
  do return false end;
end
Main.main = function() 
  _G.dofile("data/scripts/perks/perk.lua");
  _G.dofile("data/scripts/gun/procedural/gun_action_utils.lua");
  _G.rawset(_G, "OnPlayerSpawned", Main.OnPlayerSpawned);
end

Math.new = {}
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_a();
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local i = 0;
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local r = _G.string.find(self, str, startIndex1, true);
    local p = (function() 
      local _hx_1
      if ((r ~= nil) and (r > 0)) then 
      _hx_1 = r - 1; else 
      _hx_1 = -1; end
      return _hx_1
    end )();
    if ((p == -1) or (p > startIndex)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  local delim_offset = (function() 
    local _hx_1
    if (#delimiter > 0) then 
    _hx_1 = #delimiter; else 
    _hx_1 = 1; end
    return _hx_1
  end )();
  while (idx ~= nil) do 
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      local match = _G.string.sub(self, idx, newidx - 1);
      ret:push(match);
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

Std.new = {}
Std.string = function(s) 
  do return __lua_Boot.__string_rec(s) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    if (x < __lua_Boot.Min_Int32) then 
      do return __lua_Boot.Min_Int32 end;
    else
      if (x > __lua_Boot.Max_Int32) then 
        do return __lua_Boot.Max_Int32 end;
      else
        do return _G.math.floor(x) end;
      end;
    end;
  end;
end

__lua_Boot.new = {}
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.printEnum = function(o,s) 
  if (o.length == 2) then 
    do return o[0] end;
  else
    local str = Std.string(Std.string(o[0])) .. Std.string("(");
    s = Std.string(s) .. Std.string("\t");
    local _g = 2;
    local _g1 = o.length;
    while (_g < _g1) do 
      _g = _g + 1;
      local i = _g - 1;
      if (i ~= 2) then 
        str = Std.string(str) .. Std.string((Std.string(",") .. Std.string(__lua_Boot.__string_rec(o[i], s))));
      else
        str = Std.string(str) .. Std.string(__lua_Boot.__string_rec(o[i], s));
      end;
    end;
    do return Std.string(str) .. Std.string(")") end;
  end;
end
__lua_Boot.printClassRec = function(c,result,s) 
  if (result == nil) then 
    result = "";
  end;
  local f = __lua_Boot.__string_rec;
  for k,v in pairs(c) do if result ~= '' then result = result .. ', ' end result = result .. k .. ':' .. f(v, s.. '	') end;
  do return result end;
end
__lua_Boot.__string_rec = function(o,s) 
  if (s == nil) then 
    s = "";
  end;
  if (#s >= 5) then 
    do return "<...>" end;
  end;
  local _g = type(o);
  if (_g) == "boolean" then 
    do return tostring(o) end;
  elseif (_g) == "function" then 
    do return "<function>" end;
  elseif (_g) == "nil" then 
    do return "null" end;
  elseif (_g) == "number" then 
    if (o == _G.math.huge) then 
      do return "Infinity" end;
    else
      if (o == -_G.math.huge) then 
        do return "-Infinity" end;
      else
        if (o == 0) then 
          do return "0" end;
        else
          if (o ~= o) then 
            do return "NaN" end;
          else
            do return tostring(o) end;
          end;
        end;
      end;
    end;
  elseif (_g) == "string" then 
    do return o end;
  elseif (_g) == "table" then 
    if (o.__enum__ ~= nil) then 
      do return __lua_Boot.printEnum(o, s) end;
    else
      if ((_hx_wrap_if_string_field(o,'toString') ~= nil) and not __lua_Boot.isArray(o)) then 
        do return _hx_wrap_if_string_field(o,'toString')(o) end;
      else
        if (__lua_Boot.isArray(o)) then 
          local o2 = o;
          if (#s > 5) then 
            do return "[...]" end;
          else
            local _g1 = _hx_tab_array({}, 0);
            local _g11 = 0;
            while (_g11 < o2.length) do 
              local i = o2[_g11];
              _g11 = _g11 + 1;
              _g1:push(__lua_Boot.__string_rec(i, Std.string(s) .. Std.string(1)));
            end;
            do return Std.string(Std.string("[") .. Std.string(_g1:join(","))) .. Std.string("]") end;
          end;
        else
          if (o.__class__ ~= nil) then 
            do return Std.string(Std.string("{") .. Std.string(__lua_Boot.printClassRec(o, "", Std.string(s) .. Std.string("\t")))) .. Std.string("}") end;
          else
            local fields = __lua_Boot.fieldIterator(o);
            local buffer = ({});
            local first = true;
            _G.table.insert(buffer, "{ ");
            local f = fields;
            while (f:hasNext()) do 
              local f1 = f:next();
              if (first) then 
                first = false;
              else
                _G.table.insert(buffer, ", ");
              end;
              _G.table.insert(buffer, Std.string(Std.string(Std.string("") .. Std.string(Std.string(f1))) .. Std.string(" : ")) .. Std.string(__lua_Boot.__string_rec(o[f1], Std.string(s) .. Std.string("\t"))));
            end;
            _G.table.insert(buffer, " }");
            do return _G.table.concat(buffer, "") end;
          end;
        end;
      end;
    end;
  elseif (_g) == "thread" then 
    do return "<thread>" end;
  elseif (_g) == "userdata" then 
    local mt = _G.getmetatable(o);
    if ((mt ~= nil) and (mt.__tostring ~= nil)) then 
      do return _G.tostring(o) end;
    else
      do return "<userdata>" end;
    end;else
  _G.error("Unknown Lua type",0); end;
end
__lua_Boot.fieldIterator = function(o) 
  if (_G.type(o) ~= "table") then 
    do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
      do return nil end;
    end,hasNext=function(self) 
      do return false end;
    end}) end;
  end;
  local tbl = (function() 
    local _hx_1
    if (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__; else 
    _hx_1 = o; end
    return _hx_1
  end )();
  local cur = _G.pairs(tbl);
  local next_valid = function(tbl1,val) 
    while (__lua_Boot.hiddenFields[val] ~= nil) do 
      val = cur(tbl1, val);
    end;
    do return val end;
  end;
  local cur_val = next_valid(tbl, cur(tbl, nil));
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur_val;
    cur_val = next_valid(tbl, cur(tbl, cur_val));
    do return ret end;
  end,hasNext=function(self) 
    do return cur_val ~= nil end;
  end}) end;
end

__noita_EventFunctions.new = {}

__noita__PerkList_PerkList_Impl_.new = {}
__noita__PerkList_PerkList_Impl_._new = function(str) 
  local this1 = str;
  do return this1 end;
end
__noita__PerkList_PerkList_Impl_.fromString = function(str) 
  local this1 = str;
  do return this1 end;
end
__noita__PerkList_PerkList_Impl_.toString = function(this1) 
  do return this1 end;
end

__noita_wand__Spells_Spells_Impl_.new = {}
__noita_wand__Spells_Spells_Impl_._new = function(str) 
  local this1 = str;
  do return this1 end;
end
__noita_wand__Spells_Spells_Impl_.fromString = function(str) 
  local this1 = str;
  do return this1 end;
end
__noita_wand__Spells_Spells_Impl_.toString = function(this1) 
  do return this1 end;
end
_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  __lua_Boot.Max_Int32 = 2147483647;
  
  __lua_Boot.Min_Int32 = -2147483648;
  
  __lua_Boot.hiddenFields = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true}
  
  __noita__PerkList_PerkList_Impl_.CRITICAL_HIT = "CRITICAL_HIT";
  
  __noita__PerkList_PerkList_Impl_.BREATH_UNDERWATER = "BREATH_UNDERWATER";
  
  __noita__PerkList_PerkList_Impl_.EXTRA_MONEY = "EXTRA_MONEY";
  
  __noita__PerkList_PerkList_Impl_.EXTRA_MONEY_TRICK_KILL = "EXTRA_MONEY_TRICK_KILL";
  
  __noita__PerkList_PerkList_Impl_.HOVER_BOOST = "HOVER_BOOST";
  
  __noita__PerkList_PerkList_Impl_.MOVEMENT_FASTER = "MOVEMENT_FASTER";
  
  __noita__PerkList_PerkList_Impl_.LOW_GRAVITY = "LOW_GRAVITY";
  
  __noita__PerkList_PerkList_Impl_.SPEED_DIVER = "SPEED_DIVER";
  
  __noita__PerkList_PerkList_Impl_.STRONG_KICK = "STRONG_KICK";
  
  __noita__PerkList_PerkList_Impl_.REPELLING_CAPE = "REPELLING_CAPE";
  
  __noita__PerkList_PerkList_Impl_.EXPLODING_CORPSES = "EXPLODING_CORPSES";
  
  __noita__PerkList_PerkList_Impl_.SAVING_GRACE = "SAVING_GRACE";
  
  __noita__PerkList_PerkList_Impl_.INVISIBILITY = "INVISIBILITY";
  
  __noita__PerkList_PerkList_Impl_.GLOBAL_GORE = "GLOBAL_GORE";
  
  __noita__PerkList_PerkList_Impl_.REMOVE_FOG_OF_WAR = "REMOVE_FOG_OF_WAR";
  
  __noita__PerkList_PerkList_Impl_.VAMPIRISM = "VAMPIRISM";
  
  __noita__PerkList_PerkList_Impl_.EXTRA_HP = "EXTRA_HP";
  
  __noita__PerkList_PerkList_Impl_.HEARTS_MORE_EXTRA_HP = "HEARTS_MORE_EXTRA_HP";
  
  __noita__PerkList_PerkList_Impl_.GLASS_CANNON = "GLASS_CANNON";
  
  __noita__PerkList_PerkList_Impl_.RESPAWN = "RESPAWN";
  
  __noita__PerkList_PerkList_Impl_.WORM_ATTRACTOR = "WORM_ATTRACTOR";
  
  __noita__PerkList_PerkList_Impl_.WORM_DETRACTOR = "WORM_DETRACTOR";
  
  __noita__PerkList_PerkList_Impl_.PROTECTION_FIRE = "PROTECTION_FIRE";
  
  __noita__PerkList_PerkList_Impl_.PROTECTION_RADIOACTIVITY = "PROTECTION_RADIOACTIVITY";
  
  __noita__PerkList_PerkList_Impl_.PROTECTION_EXPLOSION = "PROTECTION_EXPLOSION";
  
  __noita__PerkList_PerkList_Impl_.PROTECTION_MELEE = "PROTECTION_MELEE";
  
  __noita__PerkList_PerkList_Impl_.PROTECTION_ELECTRICITY = "PROTECTION_ELECTRICITY";
  
  __noita__PerkList_PerkList_Impl_.TELEPORTITIS = "TELEPORTITIS";
  
  __noita__PerkList_PerkList_Impl_.STAINLESS_ARMOUR = "STAINLESS_ARMOUR";
  
  __noita__PerkList_PerkList_Impl_.EDIT_WANDS_EVERYWHERE = "EDIT_WANDS_EVERYWHERE";
  
  __noita__PerkList_PerkList_Impl_.ABILITY_ACTIONS_MATERIALIZED = "ABILITY_ACTIONS_MATERIALIZED";
  
  __noita__PerkList_PerkList_Impl_.PROJECTILE_HOMING = "PROJECTILE_HOMING";
  
  __noita__PerkList_PerkList_Impl_.PROJECTILE_HOMING_SHOOTER = "PROJECTILE_HOMING_SHOOTER";
  
  __noita__PerkList_PerkList_Impl_.FREEZE_FIELD = "FREEZE_FIELD";
  
  __noita__PerkList_PerkList_Impl_.DISSOLVE_POWDERS = "DISSOLVE_POWDERS";
  
  __noita__PerkList_PerkList_Impl_.BLEED_SLIME = "BLEED_SLIME";
  
  __noita__PerkList_PerkList_Impl_.BLEED_OIL = "BLEED_OIL";
  
  __noita__PerkList_PerkList_Impl_.SHIELD = "SHIELD";
  
  __noita__PerkList_PerkList_Impl_.REVENGE_EXPLOSION = "REVENGE_EXPLOSION";
  
  __noita__PerkList_PerkList_Impl_.REVENGE_TENTACLE = "REVENGE_TENTACLE";
  
  __noita__PerkList_PerkList_Impl_.ATTACK_FOOT = "ATTACK_FOOT";
  
  __noita__PerkList_PerkList_Impl_.PLAGUE_RATS = "PLAGUE_RATS";
  
  __noita__PerkList_PerkList_Impl_.PROJECTILE_REPULSION = "PROJECTILE_REPULSION";
  
  __noita__PerkList_PerkList_Impl_.ELECTRICITY = "ELECTRICITY";
  
  __noita__PerkList_PerkList_Impl_.ATTRACT_ITEMS = "ATTRACT_ITEMS";
  
  __noita__PerkList_PerkList_Impl_.EXTRA_KNOCKBACK = "EXTRA_KNOCKBACK";
  
  __noita__PerkList_PerkList_Impl_.LOWER_SPREAD = "LOWER_SPREAD";
  
  __noita__PerkList_PerkList_Impl_.BOUNCE = "BOUNCE";
  
  __noita__PerkList_PerkList_Impl_.EXTRA_PERK = "EXTRA_PERK";
  
  __noita__PerkList_PerkList_Impl_.PERKS_LOTTERY = "PERKS_LOTTERY";
  
  __noita__PerkList_PerkList_Impl_.GENOME_MORE_HATRED = "GENOME_MORE_HATRED";
  
  __noita__PerkList_PerkList_Impl_.GENOME_MORE_LOVE = "GENOME_MORE_LOVE";
  
  __noita_wand__Spells_Spells_Impl_.BURST_2 = "BURST_2";
  
  __noita_wand__Spells_Spells_Impl_.BURST_3 = "BURST_3";
  
  __noita_wand__Spells_Spells_Impl_.BURST_4 = "BURST_4";
  
  __noita_wand__Spells_Spells_Impl_.SCATTER_2 = "SCATTER_2";
  
  __noita_wand__Spells_Spells_Impl_.SCATTER_3 = "SCATTER_3";
  
  __noita_wand__Spells_Spells_Impl_.SCATTER_4 = "SCATTER_4";
  
  __noita_wand__Spells_Spells_Impl_.I_SHAPE = "I_SHAPE";
  
  __noita_wand__Spells_Spells_Impl_.Y_SHAPE = "Y_SHAPE";
  
  __noita_wand__Spells_Spells_Impl_.T_SHAPE = "T_SHAPE";
  
  __noita_wand__Spells_Spells_Impl_.W_SHAPE = "W_SHAPE";
  
  __noita_wand__Spells_Spells_Impl_.CIRCLE_SHAPE = "CIRCLE_SHAPE";
  
  __noita_wand__Spells_Spells_Impl_.PENTAGON_SHAPE = "PENTAGON_SHAPE";
  
  __noita_wand__Spells_Spells_Impl_.SPREAD_REDUCE = "SPREAD_REDUCE";
  
  __noita_wand__Spells_Spells_Impl_.RECHARGE = "RECHARGE";
  
  __noita_wand__Spells_Spells_Impl_.GRAVITY = "GRAVITY";
  
  __noita_wand__Spells_Spells_Impl_.GRAVITY_ANTI = "GRAVITY_ANTI";
  
  __noita_wand__Spells_Spells_Impl_.SINEWAVE = "SINEWAVE";
  
  __noita_wand__Spells_Spells_Impl_.CHAOTIC_ARCH = "CHAOTIC_ARCH";
  
  __noita_wand__Spells_Spells_Impl_.FLY_DOWNWARDS = "FLY_DOWNWARDS";
  
  __noita_wand__Spells_Spells_Impl_.FLY_UPWARDS = "FLY_UPWARDS";
  
  __noita_wand__Spells_Spells_Impl_.HORIZONTAL_ARCH = "HORIZONTAL_ARCH";
  
  __noita_wand__Spells_Spells_Impl_.BOUNCE = "BOUNCE";
  
  __noita_wand__Spells_Spells_Impl_.HOMING = "HOMING";
  
  __noita_wand__Spells_Spells_Impl_.DAMAGE = "DAMAGE";
  
  __noita_wand__Spells_Spells_Impl_.CRITICAL_HIT = "CRITICAL_HIT";
  
  __noita_wand__Spells_Spells_Impl_.AREA_DAMAGE = "AREA_DAMAGE";
  
  __noita_wand__Spells_Spells_Impl_.HEAVY_SHOT = "HEAVY_SHOT";
  
  __noita_wand__Spells_Spells_Impl_.KNOCKBACK = "KNOCKBACK";
  
  __noita_wand__Spells_Spells_Impl_.RECOIL = "RECOIL";
  
  __noita_wand__Spells_Spells_Impl_.RECOIL_DAMPER = "RECOIL_DAMPER";
  
  __noita_wand__Spells_Spells_Impl_.SPEED = "SPEED";
  
  __noita_wand__Spells_Spells_Impl_.EXPLOSIVE_PROJECTILE = "EXPLOSIVE_PROJECTILE";
  
  __noita_wand__Spells_Spells_Impl_.WATER_TO_POISON = "WATER_TO_POISON";
  
  __noita_wand__Spells_Spells_Impl_.BLOOD_TO_ACID = "BLOOD_TO_ACID";
  
  __noita_wand__Spells_Spells_Impl_.LAVA_TO_BLOOD = "LAVA_TO_BLOOD";
  
  __noita_wand__Spells_Spells_Impl_.TOXIC_TO_ACID = "TOXIC_TO_ACID";
  
  __noita_wand__Spells_Spells_Impl_.TRANSMUTATION = "TRANSMUTATION";
  
  __noita_wand__Spells_Spells_Impl_.NECROMANCY = "NECROMANCY";
  
  __noita_wand__Spells_Spells_Impl_.EXPLOSION = "EXPLOSION";
  
  __noita_wand__Spells_Spells_Impl_.FIRE_BLAST = "FIRE_BLAST";
  
  __noita_wand__Spells_Spells_Impl_.POISON_BLAST = "POISON_BLAST";
  
  __noita_wand__Spells_Spells_Impl_.ALCHOHOL_BLAST = "ALCHOHOL_BLAST";
  
  __noita_wand__Spells_Spells_Impl_.THUNDER_BLAST = "THUNDER_BLAST";
  
  __noita_wand__Spells_Spells_Impl_.BESERK_FIELD = "BESERK_FIELD";
  
  __noita_wand__Spells_Spells_Impl_.POLYMORPH_FIELD = "POLYMORPH_FIELD";
  
  __noita_wand__Spells_Spells_Impl_.CHAOS_POLYMORPH_FIELD = "CHAOS_POLYMORPH_FIELD";
  
  __noita_wand__Spells_Spells_Impl_.FREEZE_FIELD = "FREEZE_FIELD";
  
  __noita_wand__Spells_Spells_Impl_.ELECTROCUTION_FIELD = "ELECTROCUTION_FIELD";
  
  __noita_wand__Spells_Spells_Impl_.REGENERATION_FIELD = "REGENERATION_FIELD";
  
  __noita_wand__Spells_Spells_Impl_.TELEPORTATION_FIELD = "TELEPORTATION_FIELD";
  
  __noita_wand__Spells_Spells_Impl_.LEVITATION_FIELD = "LEVITATION_FIELD";
  
  __noita_wand__Spells_Spells_Impl_.SHIELD_FIELD = "SHIELD_FIELD";
  
  __noita_wand__Spells_Spells_Impl_.PROJECTILE_TRANSMUTATION_FIELD = "PROJECTILE_TRANSMUTATION_FIELD";
  
  __noita_wand__Spells_Spells_Impl_.PROJECTILE_THUNDER_FIELD = "PROJECTILE_THUNDER_FIELD";
  
  __noita_wand__Spells_Spells_Impl_.PROJECTILE_GRAVITY_FIELD = "PROJECTILE_GRAVITY_FIELD";
  
  __noita_wand__Spells_Spells_Impl_.SEA_LAVA = "SEA_LAVA";
  
  __noita_wand__Spells_Spells_Impl_.SEA_ALCHOHOL = "SEA_ALCHOHOL";
  
  __noita_wand__Spells_Spells_Impl_.SEA_OIL = "SEA_OIL";
  
  __noita_wand__Spells_Spells_Impl_.SEA_WATER = "SEA_WATER";
  
  __noita_wand__Spells_Spells_Impl_.SEA_ACID = "SEA_ACID";
  
  __noita_wand__Spells_Spells_Impl_.SEA_ACID_GAS = "SEA_ACID_GAS";
  
  __noita_wand__Spells_Spells_Impl_.CLOUD_WATER = "CLOUD_WATER";
  
  __noita_wand__Spells_Spells_Impl_.CLOUD_BLOOD = "CLOUD_BLOOD";
  
  __noita_wand__Spells_Spells_Impl_.CLOUD_ACID = "CLOUD_ACID";
  
  __noita_wand__Spells_Spells_Impl_.CLOUD_THUNDER = "CLOUD_THUNDER";
  
  __noita_wand__Spells_Spells_Impl_.ELECTRIC_CHARGE = "ELECTRIC_CHARGE";
  
  __noita_wand__Spells_Spells_Impl_.MATTER_EATER = "MATTER_EATER";
  
  __noita_wand__Spells_Spells_Impl_.FREEZE = "FREEZE";
  
  __noita_wand__Spells_Spells_Impl_.HITFX_BURNING_CRITICAL_HIT = "HITFX_BURNING_CRITICAL_HIT";
  
  __noita_wand__Spells_Spells_Impl_.HITFX_CRITICAL_WATER = "HITFX_CRITICAL_WATER";
  
  __noita_wand__Spells_Spells_Impl_.HITFX_CRITICAL_OIL = "HITFX_CRITICAL_OIL";
  
  __noita_wand__Spells_Spells_Impl_.HITFX_CRITICAL_BLOOD = "HITFX_CRITICAL_BLOOD";
  
  __noita_wand__Spells_Spells_Impl_.HITFX_TOXIC_CHARM = "HITFX_TOXIC_CHARM";
  
  __noita_wand__Spells_Spells_Impl_.HITFX_EXPLOSION_SLIME = "HITFX_EXPLOSION_SLIME";
  
  __noita_wand__Spells_Spells_Impl_.HITFX_EXPLOSION_SLIME_GIGA = "HITFX_EXPLOSION_SLIME_GIGA";
  
  __noita_wand__Spells_Spells_Impl_.FIREBALL_RAY = "FIREBALL_RAY";
  
  __noita_wand__Spells_Spells_Impl_.FIREBALL_RAY_ENEMY = "FIREBALL_RAY_ENEMY";
  
  __noita_wand__Spells_Spells_Impl_.ARC_ELECTRIC = "ARC_ELECTRIC";
  
  __noita_wand__Spells_Spells_Impl_.ARC_FIRE = "ARC_FIRE";
  
  __noita_wand__Spells_Spells_Impl_.ARC_GUNPOWDER = "ARC_GUNPOWDER";
  
  __noita_wand__Spells_Spells_Impl_.ARC_POISON = "ARC_POISON";
  
  __noita_wand__Spells_Spells_Impl_.X_RAY = "X_RAY";
  
  __noita_wand__Spells_Spells_Impl_.UNSTABLE_GUNPOWDER = "UNSTABLE_GUNPOWDER";
  
  __noita_wand__Spells_Spells_Impl_.ACID_TRAIL = "ACID_TRAIL";
  
  __noita_wand__Spells_Spells_Impl_.POISON_TRAIL = "POISON_TRAIL";
  
  __noita_wand__Spells_Spells_Impl_.OIL_TRAIL = "OIL_TRAIL";
  
  __noita_wand__Spells_Spells_Impl_.WATER_TRAIL = "WATER_TRAIL";
  
  __noita_wand__Spells_Spells_Impl_.GUNPOWDER_TRAIL = "GUNPOWDER_TRAIL";
  
  __noita_wand__Spells_Spells_Impl_.FIRE_TRAIL = "FIRE_TRAIL";
  
  __noita_wand__Spells_Spells_Impl_.BURN_TRAIL = "BURN_TRAIL";
  
  __noita_wand__Spells_Spells_Impl_.TORCH = "TORCH";
  
  __noita_wand__Spells_Spells_Impl_.TORCH_ELECTRIC = "TORCH_ELECTRIC";
  
  __noita_wand__Spells_Spells_Impl_.ENERGY_SHIELD = "ENERGY_SHIELD";
  
  __noita_wand__Spells_Spells_Impl_.ENERGY_SHIELD_SECTOR = "ENERGY_SHIELD_SECTOR";
  
  __noita_wand__Spells_Spells_Impl_.LIGHT_BULLET = "LIGHT_BULLET";
  
  __noita_wand__Spells_Spells_Impl_.AIR_BULLET = "AIR_BULLET";
  
  __noita_wand__Spells_Spells_Impl_.LIGHT_BULLET_TRIGGER = "LIGHT_BULLET_TRIGGER";
  
  __noita_wand__Spells_Spells_Impl_.LIGHT_BULLET_TRIGGER_2 = "LIGHT_BULLET_TRIGGER_2";
  
  __noita_wand__Spells_Spells_Impl_.LIGHT_BULLET_TIMER = "LIGHT_BULLET_TIMER";
  
  __noita_wand__Spells_Spells_Impl_.HEAVY_BULLET = "HEAVY_BULLET";
  
  __noita_wand__Spells_Spells_Impl_.HEAVY_BULLET_TRIGGER = "HEAVY_BULLET_TRIGGER";
  
  __noita_wand__Spells_Spells_Impl_.HEAVY_BULLET_TIMER = "HEAVY_BULLET_TIMER";
  
  __noita_wand__Spells_Spells_Impl_.SLOW_BULLET = "SLOW_BULLET";
  
  __noita_wand__Spells_Spells_Impl_.SLOW_BULLET_TRIGGER = "SLOW_BULLET_TRIGGER";
  
  __noita_wand__Spells_Spells_Impl_.SLOW_BULLET_TIMER = "SLOW_BULLET_TIMER";
  
  __noita_wand__Spells_Spells_Impl_.BLACK_HOLE = "BLACK_HOLE";
  
  __noita_wand__Spells_Spells_Impl_.BLACK_HOLE_BIG = "BLACK_HOLE_BIG";
  
  __noita_wand__Spells_Spells_Impl_.SPITTER = "SPITTER";
  
  __noita_wand__Spells_Spells_Impl_.SPITTER_TIMER = "SPITTER_TIMER";
  
  __noita_wand__Spells_Spells_Impl_.SPITTER_TIER_2 = "SPITTER_TIER_2";
  
  __noita_wand__Spells_Spells_Impl_.SPITTER_TIER_2_TIMER = "SPITTER_TIER_2_TIMER";
  
  __noita_wand__Spells_Spells_Impl_.SPITTER_TIER_3 = "SPITTER_TIER_3";
  
  __noita_wand__Spells_Spells_Impl_.SPITTER_TIER_3_TIMER = "SPITTER_TIER_3_TIMER";
  
  __noita_wand__Spells_Spells_Impl_.BUBBLESHOT = "BUBBLESHOT";
  
  __noita_wand__Spells_Spells_Impl_.BUBBLESHOT_TRIGGER = "BUBBLESHOT_TRIGGER";
  
  __noita_wand__Spells_Spells_Impl_.DISC_BULLET = "DISC_BULLET";
  
  __noita_wand__Spells_Spells_Impl_.BOUNCY_ORB = "BOUNCY_ORB";
  
  __noita_wand__Spells_Spells_Impl_.BOUNCY_ORB_TIMER = "BOUNCY_ORB_TIMER";
  
  __noita_wand__Spells_Spells_Impl_.RUBBER_BALL = "RUBBER_BALL";
  
  __noita_wand__Spells_Spells_Impl_.ARROW = "ARROW";
  
  __noita_wand__Spells_Spells_Impl_.LANCE = "LANCE";
  
  __noita_wand__Spells_Spells_Impl_.ROCKET = "ROCKET";
  
  __noita_wand__Spells_Spells_Impl_.ROCKET_TIER_2 = "ROCKET_TIER_2";
  
  __noita_wand__Spells_Spells_Impl_.ROCKET_TIER_3 = "ROCKET_TIER_3";
  
  __noita_wand__Spells_Spells_Impl_.GRENADE = "GRENADE";
  
  __noita_wand__Spells_Spells_Impl_.GRENADE_TRIGGER = "GRENADE_TRIGGER";
  
  __noita_wand__Spells_Spells_Impl_.GRENADE_TIER_2 = "GRENADE_TIER_2";
  
  __noita_wand__Spells_Spells_Impl_.GRENADE_TIER_3 = "GRENADE_TIER_3";
  
  __noita_wand__Spells_Spells_Impl_.GRENADE_ANTI = "GRENADE_ANTI";
  
  __noita_wand__Spells_Spells_Impl_.GRENADE_LARGE = "GRENADE_LARGE";
  
  __noita_wand__Spells_Spells_Impl_.MINE = "MINE";
  
  __noita_wand__Spells_Spells_Impl_.MINE_DEATH_TRIGGER = "MINE_DEATH_TRIGGER";
  
  __noita_wand__Spells_Spells_Impl_.PIPE_BOMB = "PIPE_BOMB";
  
  __noita_wand__Spells_Spells_Impl_.PIPE_BOME_DEATH_TRIGGER = "PIPE_BOME_DEATH_TRIGGER";
  
  __noita_wand__Spells_Spells_Impl_.PIPE_BOME_DETONATOR = "PIPE_BOME_DETONATOR";
  
  __noita_wand__Spells_Spells_Impl_.EXPLODING_DEER = "EXPLODING_DEER";
  
  __noita_wand__Spells_Spells_Impl_.LASER = "LASER";
  
  __noita_wand__Spells_Spells_Impl_.LIGHTNING = "LIGHTNING";
  
  __noita_wand__Spells_Spells_Impl_.DIGGER = "DIGGER";
  
  __noita_wand__Spells_Spells_Impl_.POWER_DIGGER = "POWER_DIGGER";
  
  __noita_wand__Spells_Spells_Impl_.CHAINSAW = "CHAINSAW";
  
  __noita_wand__Spells_Spells_Impl_.LASER_SABRE = "LASER_SABRE";
  
  __noita_wand__Spells_Spells_Impl_.LASER_SABRE_TIMER = "LASER_SABRE_TIMER";
  
  __noita_wand__Spells_Spells_Impl_.TENTACLE = "TENTACLE";
  
  __noita_wand__Spells_Spells_Impl_.TENTACLE_TIMER = "TENTACLE_TIMER";
  
  __noita_wand__Spells_Spells_Impl_.HEAL_BULLET = "HEAL_BULLET";
  
  __noita_wand__Spells_Spells_Impl_.SPIRAL_SHOT = "SPIRAL_SHOT";
  
  __noita_wand__Spells_Spells_Impl_.FIREBALL = "FIREBALL";
  
  __noita_wand__Spells_Spells_Impl_.METEOR = "METEOR";
  
  __noita_wand__Spells_Spells_Impl_.fLAMETHROWER = "fLAMETHROWER";
  
  __noita_wand__Spells_Spells_Impl_.SLIMEBALL = "SLIMEBALL";
  
  __noita_wand__Spells_Spells_Impl_.DARKFLAME = "DARKFLAME";
  
  __noita_wand__Spells_Spells_Impl_.PEBBLE = "PEBBLE";
  
  __noita_wand__Spells_Spells_Impl_.DYNAMITE = "DYNAMITE";
  
  __noita_wand__Spells_Spells_Impl_.BOMB = "BOMB";
  
  __noita_wand__Spells_Spells_Impl_.BOMB_HOLY = "BOMB_HOLY";
  
  __noita_wand__Spells_Spells_Impl_.CRUMBLING_EARTH = "CRUMBLING_EARTH";
  
  __noita_wand__Spells_Spells_Impl_.SUMMON_ROCK = "SUMMON_ROCK";
  
  __noita_wand__Spells_Spells_Impl_.SUMMON_EGG = "SUMMON_EGG";
  
  __noita_wand__Spells_Spells_Impl_.ACID_SHOT = "ACID_SHOT";
  
  __noita_wand__Spells_Spells_Impl_.THUNDERBALL = "THUNDERBALL";
  
  __noita_wand__Spells_Spells_Impl_.FIREBOMB = "FIREBOMB";
  
  __noita_wand__Spells_Spells_Impl_.SOILBALL = "SOILBALL";
  
  __noita_wand__Spells_Spells_Impl_.DEATHCROSS = "DEATHCROSS";
  
  __noita_wand__Spells_Spells_Impl_.DEATHCROSS_BIG = "DEATHCROSS_BIG";
  
  __noita_wand__Spells_Spells_Impl_.MIST_RADIOACTIVE = "MIST_RADIOACTIVE";
  
  __noita_wand__Spells_Spells_Impl_.MIST_ALCHOHOL = "MIST_ALCHOHOL";
  
  __noita_wand__Spells_Spells_Impl_.MIST_SLIME = "MIST_SLIME";
  
  __noita_wand__Spells_Spells_Impl_.MIST_BLOOD = "MIST_BLOOD";
  
  __noita_wand__Spells_Spells_Impl_.CIRCLE_FIRE = "CIRCLE_FIRE";
  
  __noita_wand__Spells_Spells_Impl_.CIRCLE_ACID = "CIRCLE_ACID";
  
  __noita_wand__Spells_Spells_Impl_.CIRCLE_OIL = "CIRCLE_OIL";
  
  __noita_wand__Spells_Spells_Impl_.CIRCLE_WATER = "CIRCLE_WATER";
  
  __noita_wand__Spells_Spells_Impl_.MATERIAL_WATER = "MATERIAL_WATER";
  
  __noita_wand__Spells_Spells_Impl_.MATERIAL_OIL = "MATERIAL_OIL";
  
  __noita_wand__Spells_Spells_Impl_.MATERIAL_BLOOD = "MATERIAL_BLOOD";
  
  __noita_wand__Spells_Spells_Impl_.MATERIAL_ACID = "MATERIAL_ACID";
  
  __noita_wand__Spells_Spells_Impl_.MATERIAL_CEMENT = "MATERIAL_CEMENT";
  
  __noita_wand__Spells_Spells_Impl_.TELEPORT_PROJECTILE = "TELEPORT_PROJECTILE";
  
  __noita_wand__Spells_Spells_Impl_.NUKE = "NUKE";
  
  __noita_wand__Spells_Spells_Impl_.FIREWORK = "FIREWORK";
  
  __noita_wand__Spells_Spells_Impl_.SUMMON_WANDGHOST = "SUMMON_WANDGHOST";
  
  __noita_wand__Spells_Spells_Impl_.TOUCH_GOLD = "TOUCH_GOLD";
  
  __noita_wand__Spells_Spells_Impl_.TOUCH_WATER = "TOUCH_WATER";
  
  __noita_wand__Spells_Spells_Impl_.TOUCH_OIL = "TOUCH_OIL";
  
  __noita_wand__Spells_Spells_Impl_.TOUCH_ALCHOHOL = "TOUCH_ALCHOHOL";
  
  __noita_wand__Spells_Spells_Impl_.TOUCH_BLOOD = "TOUCH_BLOOD";
  
  __noita_wand__Spells_Spells_Impl_.TOUCH_SMOKE = "TOUCH_SMOKE";
  
  __noita_wand__Spells_Spells_Impl_.DESTRUCTION = "DESTRUCTION";
  
  
end

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

_hx_static_init();
Main.main()
